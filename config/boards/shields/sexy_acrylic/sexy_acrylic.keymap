/*
 * Copyright (c) 2022 Gleb Sabirzyanov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "../../../../zmk-nodefree-config/helper.h"

&left_encoder { status = "okay"; };
&right_encoder { status = "okay"; };
&top_encoder { status = "okay"; resolution = <2>; };
&bottom_encoder { status = "okay"; resolution = <2>; };

#undef COMBO_TERM
#define COMBO_TERM 20
#include "combos.def"

// Layers
#define DEF 0
#define SYM 1
#define NAV 2

/ {

    behaviors {

        // https://zmk.dev/docs/behaviors/hold-tap

        lt_q: layer_tap_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_QUICK";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;                      
            quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        mt_s: mod_tap_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_QUICK";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;   
            // prevent rolled mods if anything is pressed previously         
            global-quick-tap; 
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        mt_q: mod_tap_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_QUICK";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;           
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
        layer_default {
            bindings = <
                &kp Q           &kp W          &kp E     &kp R     &kp T     &kp Y     &kp U     &kp I     &kp O     &kp P
                &mt_s LCMD A    &kp S          &kp D     &kp F     &kp G     &kp H     &kp J     &kp K     &kp L     &mt_s RALT SEMI
                &mt_q LSHIFT Z  &mt_s LCTRL X  &kp C     &kp V     &kp B     &kp N     &kp M     &kp COMMA &kp DOT   &mt_q RSHIFT SLASH
                // left, middle, top, right
                &kp LALT &mt_s LCMD SPACE &kp LCTRL &mo SYM
                // Encoders: left & top, right & bottom
                &kp RCMD &kp C_PLAY_PAUSE
                // left, top, middle, right
                &mo NAV &kp RCTRL &kp RCMD &kp RSFT
            >;

            // left, right, top, bottom
            sensor-bindings = <
                &inc_dec_kp UP DOWN 
                &inc_dec_kp LEFT RIGHT 
                &inc_dec_kp C_VOL_UP C_VOL_DN 
                &inc_dec_kp RC(RIGHT) RC(LEFT)
            >;
        };

        layer_symbols {
            bindings = <
                &kp LALT   &kp LA(LBKT) &kp LBRC  &kp RBRC  &kp GRAVE                &kp DEL   &kp N7 &kp N8 &kp N9 &kp N0
                &kp LCMD   &kp LA(BSLH) &kp LPAR  &kp RPAR  &kp LA(SEMI)             &kp RCTRL &kp N4 &kp N5 &kp N6 &kp RALT
                &kp LSHIFT &kp F        &kp LBKT  &kp RBKT  &kp LS(LA(MINUS))        &kp RCMD  &kp N1 &kp N2 &kp N3 &kp RSHIFT
                // left middle top right
                &bootloader &trans &trans &trans
                // Encoders: left & top, right & bottom
                &trans &trans
                // left top middle right
                &trans &trans &trans &trans
            >;

            sensor-bindings = <
                &inc_dec_kp UP DOWN 
                &inc_dec_kp RC(TAB) RC(TAB) 
                &inc_dec_kp RC(TAB) RC(TAB) 
                &inc_dec_kp RIGHT LEFT
            >;
        };

        layer_navigation {
            bindings = <
                &kp LALT     &kp C_PREV    &kp C_PLAY_PAUSE   &kp C_NEXT   &trans      &kp PAGE_UP     &kp F14    &kp UP     &kp F15     &kp RCTRL
                &kp LCMD     &kp C_VOL_DN  &kp C_VOL_UP       &kp C_MUTE   &trans      &kp PAGE_DOWN   &kp LEFT   &kp DOWN   &kp RIGHT   &kp RALT
                &kp LSHIFT   &kp C_BRI_DN  &kp C_BRI_UP       &kp F1       &kp F2      &kp RGUI        &trans     &trans     &kp RCTRL   &kp RSHIFT
                // left, middle, top, right
                &trans &trans &trans &trans
                // Encoders: left & top, right & bottom
                &trans &trans
                // left, top, middle, right
                &trans &trans &trans &trans
            >;

            sensor-bindings = <
                &inc_dec_kp UP DOWN 
                &inc_dec_kp RG(RA(LEFT)) RG(RA(RIGHT))
                &inc_dec_kp RC(F6) RC(F7) 
                &inc_dec_kp RIGHT LEFT
            >;
        };

        layer_trans {
            bindings = <
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans   &trans
                // left, middle, top, right
                &trans &trans &trans &trans
                // Encoders: left & top, right & bottom
                &trans &trans
                // left, top, middle, right
                &trans &trans &trans &trans
            >;
            
            sensor-bindings = <
                &inc_dec_kp UP DOWN 
                &inc_dec_kp LEFT RIGHT 
                &inc_dec_kp C_VOL_UP C_VOL_DN 
                &inc_dec_kp RIGHT LEFT
            >;
        };
    };
};


